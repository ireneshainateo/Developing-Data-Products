breaks <- quantile(dt$rankingGDP, probs = seq(0, 1, 0.2), na.rm = TRUE)
dt$quantileGDP <- cut(dt$rankingGDP, breaks = breaks)
dt[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
quentile <- c(0.2,0.4,0.6,0.8,1)
q <- quantile(combined$V2, quentile)
q1 <- combined$V2 <= 38
xtabs(q1 ~ combined$Income.Group)
R.version.string
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv (path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id,
| package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size)
select(cran, -(x:size))
select(cran, -(x:size))
select(cran, -(x:size))
select()
select(-(x:size))
select(cran,-(x:size))
cran
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2,
| package, ip_id)
arrange(cran2,package, ip_id)
arrange(cran2,country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, correct_size = size_mb + 1000)
mutate(cran3, size_mb = size / 2^20, correct_size = size +1000)
info()
mutate(cran3,correct_size = size / 2^19))
mutate(cran3, size_mb = size / 2^20, correct_size = size /2^19)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_count, desc(count))
arrange(desc(count))
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99).
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique>465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
Submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students, sex_class, count)
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res,sex_class, C("sex", "class"))
separate(res,sex_class, c("sex", "class"))
submit()
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
?extract_numeric
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed,status= final("passed"))
?mutate
mutate(passed,final="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
rbind_list(passed,failed)
sat
submit()
?select
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
sat
?gather
sat
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("192012//")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd("2014-05-14", "2014-09-22", "2014-07-11")
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(hours = 8, minutes = 19, seconds = 00)
this_moment <- update(hours = 8, minutes = 19)
this_moment <- update(now)
this_moment <- update(hours = 8, minutes = 21)
this_moment <- update(hours = 9, minutes = 21)
this_moment <- update(hours = 9, minutes = 21, seconds = 00)
this_moment <- update(this_moment, hours = 9, minutes = 21, seconds = 00)
this_moment
nyc <-now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update (depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15), minutes(34)
arrive <- depart + hours(15) minutes(34)
arrive <- depart + hours(15) and minutes(34)
arrive <- depart + (hours(15) ,minutes(34))
arrive <- depart + 15 hours and 50 minutes
arrive <- depart + hours(15)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tzone = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
sigma_1^2/n_1 + sigma_2^2/n_2
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sigma_1^2/n_1 + sigma_2^2/n_2
mean(temp)
Lambda = 0.2
n = 40
nSims = 1:1000
set.seed(820)
Means <- data.frame(x = sapply(nSims, function(x) {
mean(rexp(n, Lambda))
}))
head(Means)
m = mean(Means$x)
m
sd = sd(Means$x)
sd
(1/Lambda)/sqrt(40)
var(Means$x)
((1/Lambda)/sqrt(40))^2
library(ggplot2)
ggplot(data = Means, aes(x = x)) + geom_histogram(aes(y = ..density..), fill = I("darkolivegreen3"),
binwidth = 0.2, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd = sd(Means$x)))
data(ToothGrowth)
str(ToothGrowth)
library(ggplot2)
library(ggplot2)
data(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
plot(ToothGrowth)
meansupp = split(ToothGrowth$len, ToothGrowth$supp)
sapply(meansupp, mean)
ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=supp))+
xlab("Supplement type") +ylab("Tooth length")
meandose = split(ToothGrowth$len, ToothGrowth$dose)
sapply(meandose, mean)
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) +
xlab("Dose in miligrams") +ylab("Tooth length")
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) +
xlab("Dose in miligrams") +ylab("Tooth length")
ggplot(aes(x=meandose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) +
xlab("Dose in miligrams") +ylab("Tooth length")
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose))+
xlab("Dose in miligrams") +ylab("Tooth length")
ToothGrowth$dose<-as.factor(ToothGrowth$dose)
summary(ToothGrowth$dose)
meansupp = split(ToothGrowth$len, ToothGrowth$supp)
sapply(meansupp, mean)
ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=supp))+
xlab("Supplement type") +ylab("Tooth length")
meandose = split(ToothGrowth$len, ToothGrowth$dose)
sapply(meandose, mean)
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose))+
xlab("Dose in miligrams") +ylab("Tooth length")
len<-ToothGrowth$len
supp<-ToothGrowth$supp
dose<-ToothGrowth$dose
sapply(meansupp, var)
t.test(len[supp=="OJ"], len[supp=="VC"], paired = FALSE, var.equal = FALSE)
t.test(len[dose==2], len[dose==1], paired = FALSE, var.equal = TRUE)
t.test(len[dose==1], len[dose==0.5], paired = FALSE, var.equal = TRUE)
# Store pvalues in a vector
pValues<-c(t.test(len[supp=="OJ"], len[supp=="VC"], paired = FALSE, var.equal = FALSE)$p.value,
t.test(len[dose==2], len[dose==1], paired = FALSE, var.equal = TRUE)$p.value,
t.test(len[dose==1], len[dose==0.5], paired = FALSE, var.equal = TRUE)$p.value,
t.test(len[dose==2], len[dose==0.5], paired = FALSE, var.equal = TRUE)$p.value)
# Controls FWER
sum(p.adjust(pValues, method = "bonferroni") < 0.05)
round(p.adjust(pValues, method = "bonferroni"),3)
# Controls FDR
sum(p.adjust(pValues, method = "BH") < 0.05)
round(p.adjust(pValues, method = "BH"),3)
par(mfrow = c(1, 2))
plot(pValues, p.adjust(pValues, method = "bonferroni"), pch = 19)
plot(pValues, p.adjust(pValues, method = "BH"), pch = 19)
mtcars
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
# Give the hat diagonal for the most influential point
fit <- lm(y ~ x)
hatvalues(fit)
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars)
# To compare model we usually use an anova table
# anova null hypothesis says that both models are the same.
compare <- anova(fit1, fit2)
compare$Pr
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
# Give the slope dfbeta for the point with the highest hat value.
fit <- lm(y ~ x)
dfbetas(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
tail(round(sort(hatvalues(fit)),4),1)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
sort(round(dfbeta(fit)[,2],3))
library(ggplot2)
data(mtcars)
mtcars[1:3, ]
dim(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
attach(mtcars)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- RandomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomforest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
M <- train(y ~ ., data=vowel.train, method="rf")
varImp(M)
install.packages("caret")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
M <- train(y ~ ., data=vowel.train, method="rf")
varImp(M)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
M <- train(y ~ ., data=vowel.train, method="rf")
install.packages("randomForest")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
M <- train(y ~ ., data=vowel.train, method="rf")
varImp(M)
install.packages("e1071")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
M <- train(y ~ ., data=vowel.train, method="rf")
varImp(M)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
M <- train(y ~ ., data=vowel.train, method="rf")
varImp(M)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
setwd("~/Dropbox/IDA Coursera DATA Science MOOC/09 Developing Data Products")
shiny::runApp('bmi_app')
shiny::runApp('bmi_app')
shiny::runApp('Developing-Data-Products/bmi_app')
shiny::runApp('Developing-Data-Products/bmi_app')
shiny::runApp('Developing-Data-Products/bmi_app')
